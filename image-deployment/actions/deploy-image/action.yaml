name: 'Deploy Image'
description: 'Deploy Image Process'
inputs:
  target_env:
    description: Environment Name (Possible values are dev, int, stage and spro)
    required: true
  platform:
    description: Cloud provide(Possible values are aws, azure, all)
    required: true
  component:
    description: Name of the component
    required: false
  bucket_name:
    description: S3 bucket name where stable build metadata will be retrieved
    required: true
  metadata_path:
    description: S3 bucket folder path where stable build metadata will be retrieved
    required: true
  app_version:
    description: Specify the current app version ( Example 1012 )
    default: "1012"
    required: true
  scripts:
    description: Specify the deployment script
    default: deploy.sh
    required: true
runs:
  using: 'composite'
  steps:
  - name: Details of the Job
    run: |
      echo "INFO: -------------DETAILS OF THE JOB-------------"
      echo "INFO: Target Environment - ${{ inputs.target_env }}"
      echo "INFO: Cloud Platform - ${{ inputs.platform }}"
      echo "INFO: Components - ${{ inputs.component }}"
      echo " "
      echo " "
    shell: bash
  - name: Deploy Stable Image
    run: |
      echo "INFO: -------------DEPLOY STABLE IMAGE-------------"
      if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
      fi
      echo "INFO: >>COMPONENTS<<"
      components=($(echo ${{ inputs.component }} | sed -e 's\,\ \g'))
      echo "${components[@]}"
      echo " "
      echo " "
      echo "INFO: >>TAGS<<"
      tags=($(cat taglist.txt | sed -e 's\,\ \g'))
      echo "${tags[@]}"
      echo " "
      echo " "
      

      if [[ ("${{ inputs.target_env }}" = "int") || ("${{ inputs.target_env }}" = "stage") || ("${{ inputs.target_env }}" = "preprod") ]]
      then
        promotion_file="${platforms[${b2b_platform}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-promoted-builds.txt"
        lookforfile=$(aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$promotion_file || true)
        if [[ "$lookforfile" == "" ]]
            then
              # touch file in local if the file is not there in AWS S3
              echo "ERR: Promotion file is not present. Please check whether we have promoted images in Target environment."
              exit 1
            else
              # copies contents of the file to S3 existing file
              aws s3 cp s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$promotion_file $promotion_file
        fi
        for b2b_component in ${!components[@]}
            do
              lookforcomponent=`sed -n "/^${components[${b2b_component}]}: ${tags[${b2b_component}]}/p" $promotion_file || true`
              if [[ "$lookforcomponent" = "" ]]
              then
                      echo "${components[${b2b_component}]}: ${tags[${b2b_component}]}"
                      echo "ERR: Image not promoted to ECR"
                      exit 1
                      
              else
                    pwd
                      ls -ltr
                      shaID=$(grep -iE "${components[${b2b_component}]}:" shafile.txt | cut -d " " -f 3)
                      echo "CHECKSUM"
                      checksum=$(grep -i $shaID $promotion_file || true)
                      if [[ "$checksum" == "" ]]
                        then
                          echo "ERR: SHA MISS MATCH FOR ${components[${b2b_component}]}: ${tags[${b2b_component}]}"
                          exit 1
                        else
                          echo "INFO: SHA MATCHED FOR ${components[${b2b_component}]}: ${tags[${b2b_component}]}"
                      fi
              fi
            done
        fi

        for b2b_platform in ${!platforms[@]} 
          do
            deployment_file="${platforms[${b2b_platform}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
            lookforfile=$(aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file || true)
           
            if [[ "$lookforfile" == "" ]]
            then
              # touch file in local if the file is not there in AWS S3
              touch "./${deployment_file}"
            else
              # copies contents of the file to S3 existing file
              aws s3 cp s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$deployment_file $deployment_file
            fi
        done

          for b2b_component in ${!components[@]}
                do
                  lookforcomponent=`sed -n "/^${components[${b2b_component}]}:/p" $deployment_file || true`
                  if [[ "$lookforcomponent" = "" ]]
                  then
                          pwd
                          ls -ltr
                          shaID=$(grep -i "${components[${b2b_component}]}: ${tags[${b2b_component}]}" shafile.txt | cut -d " " -f 3)
                          echo "INFO: SHAID : $shaID"
                          echo "${components[${b2b_component}]}: ${tags[${b2b_component}]}: $shaID " >> $deployment_file
                  else
                          pwd
                          ls -ltr
                          
                          shaID=$(grep -i "${components[${b2b_component}]}: ${tags[${b2b_component}]}" shafile.txt | cut -d " " -f 3)
                          sed -i "s/${components[${b2b_component}]}: .*/${components[${b2b_component}]}: ${tags[${b2b_component}]}: $shaID /g" $deployment_file
                  fi
                done
        
        
        #------------------------------------------------------------------------------Start deploying to environment------------------------------------------------------------------------------
        datelabel=$(TZ=IST-5:30 date | sed 's/ /-/g')
        for b2b_platform in ${!platforms[@]}
        do
          
          echo "Deploying Images to  ${platforms[$b2b_platform]} for ${{ inputs.target_env }} environment"
          
          # Deploying scripts
          chmod 777 ${{ inputs.scripts }}  
          ${{ inputs.scripts }} ${platforms[$b2b_platform]} ${{ inputs.target_env }} 
           
         done
          #main file 
          aws s3 cp $deployment_file s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/${platforms[${b2b_platform}]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt 
          #history file
          aws s3 cp $deployment_file s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/${datelabel}-${platforms[$b2b_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt 
    shell: bash
  - name: Delete old Builds
    run: |
        if [[ "${{ inputs.platform }}" = "all" ]]
        then
          platforms=(aws azure)
        else
          platforms=(${{ inputs.platform }})
        fi
        echo "${platforms[*]}"
        for b2b_platform in ${!platforms[@]}
        do
          echo "Build History of ${platforms[$b2b_platform]}-${{ inputs.target_env }}"
          aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/ | awk '{print $4}' | grep ".*-${platforms[$b2b_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt"
          fcount=$(aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/ | awk '{print $4}' | grep ".*-${platforms[$b2b_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt" | wc -l)
          echo "$fcount"
          if [[ $fcount -le 3 ]]
          then
                  echo "Deletion cancelled."
          else
                  aws s3 ls s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/ | awk '{print $4}' | grep ".*-${platforms[$b2b_platform]}-${{ inputs.target_env }}-${{ inputs.app_version }}-deploy-builds.txt" | sort -nr | tail +4 | while read filename
          do
                  echo "Deleting file $filename"
                  aws s3 rm s3://${{inputs.bucket_name}}/${{inputs.metadata_path}}/$filename
                  echo "$filename deleted sucessfully"
          done
          fi
        done
    shell: bash
