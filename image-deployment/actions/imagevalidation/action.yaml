name: "Image Validation"
description: "Image Validation for the parameters passed"
inputs:
  component:
    description: Name of the component
    required: false
  source_aws_registry:
    description: Source AWS registry
    required: true
  source_aws_repo_prefix:
    description: Source AWS Repo
    required: true
  
runs:
  using: composite
  steps:
    - name: Validate Image
      run: |
        components=($(echo ${{ inputs.component }} | sed -e 's\,\ \g'))
        echo "$components"
        touch ./shafile.txt
        for b2b_component in ${!components[@]}
            do
              echo "AWS REPO: ${{ inputs.source_aws_repo_prefix }}"
              repo_present=$(aws ecr describe-repositories | jq -r .repositories[].repositoryName | grep -E "${{ inputs.source_aws_repo_prefix }}/${components[${b2b_component}]}$" || true)
              echo "REPO: $repo_present"
              if [[ "$repo_present" = "" ]]
                then
                  echo "ERR: Repository is not present in AWS ECR."
                  exit 1
              else
                latest_tag=$(aws ecr describe-images --repository-name=${{ inputs.source_aws_repo_prefix }}/${components[${b2b_component}]} --query 'sort_by(imageDetails,& imagePushedAt)[*].imageTags[0]' --output yaml | tail -n 1 | awk -F'- ' '{print $2}')
                shaID=$(aws ecr describe-images --repository-name=${{ inputs.source_aws_repo_prefix }}/${components[${b2b_component}]} --image-ids imageTag=$latest_tag  | jq '.imageDetails[0].imageDigest' -r)
                echo "Info: Image present in AWS ECR."
                echo "${components[${b2b_component}]}: $latest_tag: $shaID" >> shafile.txt
              fi
        done
        pwd
        echo "-----------SHA FILE--------------"
        ls -ltr

        echo "-----------SHA FILE--------------"
        cat shafile.txt
        echo "-----------SHA FILE--------------"
       
      shell: bash
      
